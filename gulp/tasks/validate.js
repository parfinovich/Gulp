import fs from 'fs';
import path from 'path';
import { globby } from 'globby';
import htmlValidator from 'html-validator';
import log from 'fancy-log';
import beep from 'beepbeep';

export const validateHTML = async () => {
  const files = await globby('dist/**/*.html');
  let hasError = false;

  if (!files.length) {
    log.warn('‚ö†Ô∏è –ù–µ—Ç HTML-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ dist/');
    return;
  }

  for (const file of files) {
    try {
      const html = fs.readFileSync(file, 'utf8');

      const result = await htmlValidator({
        data: html,
        format: 'text'
      });

      if (result.trim()) {
        beep();
        log.warn(`‚ö†Ô∏è  W3C issues in: ${file}\n${result}`);
        hasError = true;
      } else {
        log(`‚úÖ ${file} ‚Äî –≤–∞–ª–∏–¥–µ–Ω`);
      }

    } catch (err) {
      beep();
      log.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ${file}:\n${err.message}`);
      hasError = true;
    }
  }

  if (hasError) {
    log.warn('üö´ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ HTML-—Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏ W3C.');
  } else {
    log('üéâ –í—Å–µ HTML-—Ñ–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ W3C-–ø—Ä–æ–≤–µ—Ä–∫—É!');
  }
};
